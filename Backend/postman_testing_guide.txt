SOCIAL MEDIA APP - API TESTING GUIDE
===================================

BASE URL: http://localhost:5000

ENVIRONMENT VARIABLES
--------------------
- base_url: http://localhost:5000
- token: (will be obtained after login)

1. AUTHENTICATION ROUTES
-----------------------

1.1 Signup
POST {{base_url}}/api/auth/signup
Body (JSON):
{
    "username": "testuser",
    "email": "test@example.com",
    "password": "Test123!",
    "avatar": "https://example.com/avatar.jpg"
}

1.2 Login
POST {{base_url}}/api/auth/login
Body (JSON):
{
    "email": "test@example.com",
    "password": "Test123!"
}
-> Save the returned token as environment variable

2. USER ROUTES
-------------
Header required for all: 
Authorization: Bearer {{token}}

2.1 Get Current User
GET {{base_url}}/api/user/me

2.2 Get User by ID
GET {{base_url}}/api/user/:id
(Replace :id with actual user ID)

2.3 Update Profile
PUT {{base_url}}/api/user/me
Body (JSON):
{
    "bio": "Updated bio",
    "avatar": "https://example.com/new-avatar.jpg"
}

2.4 Follow/Unfollow User
POST {{base_url}}/api/user/follow/:id
(Replace :id with target user ID)

2.5 Get Followers
GET {{base_url}}/api/user/followers

2.6 Get Following
GET {{base_url}}/api/user/following

2.7 Block/Unblock User
POST {{base_url}}/api/user/block/:id
(Replace :id with user ID to block)

3. POST ROUTES
-------------
Header required for all:
Authorization: Bearer {{token}}

3.1 Create Post
POST {{base_url}}/api/posts
Body (JSON):
{
    "content": "This is a test post",
    "image": "https://example.com/image.jpg"
}
-> Save returned post ID

3.2 Get Feed
GET {{base_url}}/api/posts

3.3 Get Explore Posts
GET {{base_url}}/api/posts/explore

3.4 Get Single Post
GET {{base_url}}/api/posts/:id
(Use saved post ID)

3.5 Update Post
PUT {{base_url}}/api/posts/:id
Body (JSON):
{
    "content": "Updated content"
}

3.6 Like/Unlike Post
POST {{base_url}}/api/posts/:id/like

3.7 Add Comment
POST {{base_url}}/api/posts/:id/comment
Body (JSON):
{
    "content": "This is a test comment"
}

3.8 Get Comments
GET {{base_url}}/api/posts/:id/comments

3.9 Bookmark Post
POST {{base_url}}/api/posts/:id/bookmark

3.10 Delete Post
DELETE {{base_url}}/api/posts/:id

4. STORY ROUTES
--------------
Header required for all:
Authorization: Bearer {{token}}

4.1 Create Story
POST {{base_url}}/api/stories
Body (JSON):
{
    "media": "https://example.com/story.jpg",
    "expiresAt": "2024-03-20T12:00:00Z"
}
-> Save returned story ID

4.2 Get Stories
GET {{base_url}}/api/stories

4.3 Get Archived Stories
GET {{base_url}}/api/stories/archive

4.4 Archive Story
PUT {{base_url}}/api/stories/:id

4.5 View Story
POST {{base_url}}/api/stories/:id/view

4.6 Reply to Story
POST {{base_url}}/api/stories/:id/reply
Body (JSON):
{
    "content": "Nice story!"
}

5. MESSAGE ROUTES
----------------
Header required for all:
Authorization: Bearer {{token}}

5.1 Send Message
POST {{base_url}}/api/messages
Body (JSON):
{
    "receiver": "user_id_here",
    "content": "Hello!",
    "media": "https://example.com/image.jpg"
}

5.2 Get Messages with User
GET {{base_url}}/api/messages/:userId

5.3 Get All Conversations
GET {{base_url}}/api/messages

6. NOTIFICATION ROUTES
---------------------
Header required for all:
Authorization: Bearer {{token}}

6.1 Get Notifications
GET {{base_url}}/api/notifications

6.2 Mark All as Read
PUT {{base_url}}/api/notifications

7. ADMIN ROUTES
--------------
Header required for all:
Authorization: Bearer {{token}}
(Must be admin user)

7.1 Get All Users
GET {{base_url}}/api/admin/users

7.2 Get Reports
GET {{base_url}}/api/admin/reports

7.3 Ban User
POST {{base_url}}/api/admin/ban/:id

7.4 Remove Content
DELETE {{base_url}}/api/admin/content/:id

8. UPLOAD ROUTE
--------------
Header required:
Authorization: Bearer {{token}}

8.1 Upload File
POST {{base_url}}/api/upload
Body (form-data):
Key: file
Value: Select file

TESTING SEQUENCE
---------------
1. Create test user (signup)
2. Login and save token
3. Create a post
4. Create a story
5. Test interactions (likes, comments, follows)
6. Test messaging
7. Test notifications
8. Test admin functions (with admin account)

ERROR HANDLING
-------------
Check for proper error responses (400, 401, 403, 404, 500)
Test with:
- Invalid tokens
- Missing fields
- Invalid data types
- Non-existent IDs
- Unauthorized actions

SUCCESS RESPONSES
----------------
200: Success (GET, PUT)
201: Created (POST)
204: No Content (DELETE)

POSTMAN COLLECTION
-----------------
Import the routes above as a Postman collection
Use environment variables for base_url and token
Create separate folders for each route category
Use tests to validate responses
